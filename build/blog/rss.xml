<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Lucas Picinini Blog</title>
        <link>https://lucas-picinini.netlify.app/blog</link>
        <description>Lucas Picinini Blog</description>
        <lastBuildDate>Mon, 22 Jan 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>pt-br</language>
        <item>
            <title><![CDATA[Entendo o Hoisting no JavaScript]]></title>
            <link>https://lucas-picinini.netlify.app/blog/hoisting-javascript</link>
            <guid>https://lucas-picinini.netlify.app/blog/hoisting-javascript</guid>
            <pubDate>Mon, 22 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[hoist é literalmente guindaste em inglês]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="hoist-é-literalmente-guindaste-em-inglês"><em>hoist é literalmente guindaste em inglês</em><a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#hoist-%C3%A9-literalmente-guindaste-em-ingl%C3%AAs" class="hash-link" aria-label="Link direto para hoist-é-literalmente-guindaste-em-inglês" title="Link direto para hoist-é-literalmente-guindaste-em-inglês">​</a></h2>
<blockquote>
<p><strong>Considerações Breves:</strong> Essa é uma mistura bem maneira de dois artigos realizada através de uma tradução livre, com o objetivo de tornar conceitos de programação mais acessíveis à nossa maneira nativa de falar as coisas, buscando assuntos que carecem de fontes em português e fugindo um pouco dos termos "quadrados" que os tradutores nos oferecem. Todos sabemos que essas ferramentas evoluíram demais nos últimos anos e dão conta do serviço, mas também é bem legal aprender algo com uma linguagem nativa mais próxima do que a gente usa no dia a dia não é mesmo?! Então sem mais delongas ou formalidades, aqui estão as fontes de pesquisa - <a href="https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript#introduction" target="_blank" rel="noopener noreferrer">DigitalOcean</a> - <a href="https://www.geeksforgeeks.org/javascript-hoisting/" target="_blank" rel="noopener noreferrer">GeeksforGeeks</a> ; e vamos para o assunto. Assunto();</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introdução">Introdução<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#introdu%C3%A7%C3%A3o" class="hash-link" aria-label="Link direto para Introdução" title="Link direto para Introdução">​</a></h2>
<p>Neste artigo vamos investigar o famoso mecanismo de hoisting do JavaScript. Como mencionado lá no início, hoist é literalmente guindaste em inglês e hoisting pode ser traduzido como elevação ou suspensão. Tenham isso em mente porque o cara que inventou o nome pra isso fez uma boa analogia e ajuda a entender melhor o conceito. Check it out.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="apresentação">Apresentação<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#apresenta%C3%A7%C3%A3o" class="hash-link" aria-label="Link direto para Apresentação" title="Link direto para Apresentação">​</a></h2>
<p>O Hoisting é o comportamento padrão do JavaScript de mover as declarações para o topo do seu escopo antes da execução do código, não importa se o escopo seja global ou local. Se você já se perguntou o porque é capaz de chamar funções antes mesmo das linhas em que elas estão escritas, aqui está o motivo.</p>
<ul>
<li><em>Nota¹ -&gt; o JavaScript faz apenas o hoisting de declarações, NÃO de inicializações.</em></li>
<li><em>Nota² -&gt; o JavaScript aloca memória para todas as variáveis e funções definidas no programa antes da execução.</em></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="entendendo-escopo-global-e-local">Entendendo escopo Global e Local<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#entendendo-escopo-global-e-local" class="hash-link" aria-label="Link direto para Entendendo escopo Global e Local" title="Link direto para Entendendo escopo Global e Local">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="declarações-atribuiçãoinicialização-e-usochamadas">Declarações, atribuição/inicialização e uso/chamadas<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#declara%C3%A7%C3%B5es-atribui%C3%A7%C3%A3oinicializa%C3%A7%C3%A3o-e-usochamadas" class="hash-link" aria-label="Link direto para Declarações, atribuição/inicialização e uso/chamadas" title="Link direto para Declarações, atribuição/inicialização e uso/chamadas">​</a></h3>
<p>Antes de partirmos para os escopos, precisamos deixar claro para todos o que é cada tipo de linha no código e lembre-se, o hoisting acontece apenas para declarações e não para inicializações ou atribuições.</p>
<ul>
<li>
<p><strong>Declarações</strong> -&gt; Ocorrem quando declaramos uma variável ou constante. É quando estamos criando ela no código.</p>
</li>
<li>
<p><strong>Atribuições/inicialização</strong> -&gt; Pode ser entendido como o momento que jogamos um valor pra dentro de uma variável, justamente atribuindo algo a ela ou iniciando a parada que foi declarada, mesmo que depois ela assuma outro valor.</p>
</li>
<li>
<p><strong>Uso/chamada</strong> -&gt; É quando usamos essa variável e seu valor para algum output ou qualquer outra coisa durante o programa.</p>
</li>
<li>
<p><strong>Exemplo:</strong></p>
</li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Declaração</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Atribuição</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Uso</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="escopos">Escopos<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#escopos" class="hash-link" aria-label="Link direto para Escopos" title="Link direto para Escopos">​</a></h3>
<p>Conceito que circunda toda linguagem de programação e é extremamente importante, diz respeito ao local onde uma variável é acessível dentro do código. Antes do ECMAScript6, o JavaScript só possuía escopo global e local. Com a introdução do ES6, o JavaScript passou a ter escopo Global, Local e de Bloco. No JavaScript, quando declaramos uma variável dentro de uma função ou bloco, ela só é acessível lá dentro, não podendo ser acessada pelo lado de fora, mas podemos utilizar um return ou outras técnicas para fazer a função cuspir o valor pra fora. Exemplos:</p>
<ul>
<li><strong>Escopo de Bloco</strong> -&gt; variáveis declaradas dentro de um <!-- --> bloco não podem ser acessadas por fora.</li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// não podemos acessar x aqui</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>Variáveis declaradas com var NÃO podem ter escopo de bloco <!-- -->.</strong></li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// x PODE ser acessado aqui</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>Escopo local</strong> -&gt; Variáveis declaradas dentro de <strong>funções</strong> possuem escopo local. Neste caso, não importa se utilizarmos var, let ou const na declaração, as 3 formas criam escopo local.</li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">myFunction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> carName </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Tesla"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// carName não pode ser acessado aqui</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>Escopo global</strong> -&gt; Variáveis com escopo global podem ser acessadas em qualquer local do programa.</li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> carName </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Tesla"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// podemos acessar aqui</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">myFunction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// e usar a variável aqui também</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>Variáveis não declaradas</strong> -&gt; sem o uso das palavras var, let ou const.</li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">codeHoist</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">50</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">codeHoist</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// ReferenceError : b is not defined</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>O código deu erro com o <em>b</em> porque essa variável possui escopo local, ao mesmo tempo, conseguimos acessar o <em>a</em> fora da função porque todas as variáveis declaradas sem as palavras reservadas var, let ou const, passam a ter <strong>escopo global automaticamente</strong>. Tenha atenção com isso. Vamos entender melhor os erros que envolvem o hoisting a seguir.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="undefined-vs-referenceerror">undefined vs ReferenceError<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#undefined-vs-referenceerror" class="hash-link" aria-label="Link direto para undefined vs ReferenceError" title="Link direto para undefined vs ReferenceError">​</a></h2>
<p>É importante entender os tipos de erro que o console apresenta, isso permite debugar o código de maneira consistente e encontrar os bugs mais rapidamente. Há uma pequena diferença entre undefined e ReferenceError. O undefined ocorre quando temos uma variável que não está definida ou que está explicitamente definida como undefined (existem algumas aplicações para isso). O ReferenceError acontece quando tentamos acessar uma variável que nem foi declarada. Entender isso será importante para compreender os conceitos a seguir.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="o-tal-do-hoisting">O tal do Hoisting<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#o-tal-do-hoisting" class="hash-link" aria-label="Link direto para O tal do Hoisting" title="Link direto para O tal do Hoisting">​</a></h2>
<p>Quando pensamos nas especificações ECMAScript5, o tipo de variável que vem a mente é o var. O Hoisting acontece de maneira um pouco diferente com esse tipo de declaração quando comparamos com let ou const, isso ocorre por causa de algumas mudanças que ocorreram com a inserção do let/const na linguagem com o lançamento do ECMAScript6. Primeiramente vamos utilizar o var como exemplo e finalmente enteder como esse impotante conceito, o Hoisting (ou elevação), se comporta.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="hoisting-com-declarações-var">Hoisting com declarações var<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#hoisting-com-declara%C3%A7%C3%B5es-var" class="hash-link" aria-label="Link direto para Hoisting com declarações var" title="Link direto para Hoisting com declarações var">​</a></h3>
<ul>
<li><strong>Como escrevemos o código:</strong></li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Fulaninho da Massa'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Output no console:</em></p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword nil" style="color:#00009f">undefined</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>Como o interpretador vê o código:</strong></li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// undefined</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Fulaninho da Massa'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Aqui podemos ver <strong>o Hoisting em ação pela primeira vez</strong>, pois como explicado lá no início do artigo, o Hoisting é o comportamento padrão do JavaScript de mover as <strong>declarações</strong> para o topo do seu escopo antes da execução do código. Como o Hoisting suspende/eleva apenas as declarações, mas não as inicializações do código, o console cospe undefined, porque entende que é uma variável apenas declarada, que ainda não foi definida (como vimos na seção de erros).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="hoisting-com-declarações-letconstes6">Hoisting com declarações let/const(ES6)<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#hoisting-com-declara%C3%A7%C3%B5es-letconstes6" class="hash-link" aria-label="Link direto para Hoisting com declarações let/const(ES6)" title="Link direto para Hoisting com declarações let/const(ES6)">​</a></h3>
<p>Se utilizarmos o exemplo anterior, mas declarando nossa variável com a palavra let, vamos notar um comportamento diferente, isso é explicado por conta de algumas mudanças com a adoção do padrão ES6.</p>
<ul>
<li><strong>Como escrevemos o código:</strong></li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Fulaninho da Massa'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Output no console:</em></p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token known-class-name class-name">ReferenceError</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> name is not defined</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>Como o interpretador vê o código:</strong></li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// ReferenceError: name is not defined</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Fulaninho da Massa'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Neste caso, por conta da introdução do ES6 e suas mudanças técnicas que não aceitam bem o uso de variáveis não declaradas, o Hoisting se comporta de forma diferente. É como se ele não conseguisse desgrudar a declaração da atribuição para elevá-la ao topo do escopo em seguida, como aconteceu no exemplo com o var. Sendo assim, como o Hoisting só funciona para declarações e não para atribuições, ele não acontece neste caso, já que não consegue descolar a declaração da atribuição com as palavras let ou const. É simplesmente uma definição do ES6.</p>
<p>Por esse motivo o console cospe o erro ReferenceError, pois para a máquina essa variável ainda nem foi declarada, já que a execução do código acontece linha por linha e neste caso o Hoisting não aconteceu. Doidera né não?! Mas como achamos isso legal, vamos entender o Hoisting em funções e porque não conseguimos chamar alguns tipos de função antes de declará-las.</p>
<blockquote>
<p>É importante lembrar que o Hoisting ocorre para as declarações de var, let e const no JavaScript. Apenas nos casos que envolvem inicialização/atribuição que o comportamento se difere.</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="hoisting-em-funções">Hoisting em Funções<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#hoisting-em-fun%C3%A7%C3%B5es" class="hash-link" aria-label="Link direto para Hoisting em Funções" title="Link direto para Hoisting em Funções">​</a></h2>
<p>A grosso modo, as funções no JavaScript podem ser dividas em: Declarações de Funções e Expressões de Funções. Agora nós vamos investigar como o Hoisting afeta esses tipos de funções.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="declarações-de-funções">Declarações de Funções<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#declara%C3%A7%C3%B5es-de-fun%C3%A7%C3%B5es" class="hash-link" aria-label="Link direto para Declarações de Funções" title="Link direto para Declarações de Funções">​</a></h3>
<p>Maneira mais conhecida e tradicional de declarar funções. É declarada através da palavra <em>function</em>, seguida do nome da função e dos parênteses, que podem conter parâmetros ou não, finalizando com as chaves de abertura e fechamento do bloco de execução.</p>
<p>Esse tipo de função <strong>é completamente afetada pelo Hoisting</strong> e imediatamente elevada para o topo do seu escopo pelo interpretador antes da execução do código. Isso é o que permite a chamada de funções antes de sua aparição na escrita do código. Veja como funciona no exemplo a seguir:</p>
<ul>
<li><strong>Como escrevemos o código:</strong></li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">meEleve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Output: Essa função foi elevada.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">meEleve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Essa função foi elevada."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Output no console:</em></p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token maybe-class-name">Essa</span><span class="token plain"> função foi elevada</span><span class="token punctuation" style="color:#393A34">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>Como o interpretador vê o código:</strong></li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">meEleve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Essa função foi elevada."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">meEleve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="expressões-de-funções">Expressões de Funções<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#express%C3%B5es-de-fun%C3%A7%C3%B5es" class="hash-link" aria-label="Link direto para Expressões de Funções" title="Link direto para Expressões de Funções">​</a></h3>
<p>Expressões de funções <strong>NÃO</strong> sofrem o efeito do Hoisting. Podemos usar a mesma abstração utilizada no exemplo onde let/const são declaradas já sendo inicializadas para entender o que ocorre aqui, pois é basicamente o mesmo efeito.</p>
<p>É como se o Hoisting não conseguisse descolar a declação da função que está sendo inicializada na variável, dessa forma, como o Hoisting não funciona para atribuições, ele também não acontece neste caso. Exemplo:</p>
<ul>
<li><strong>Como escrevemos o código:</strong></li>
</ul>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">vaiDaErrado</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Output: TypeError: expression is not a fuction</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">vaiDaErrado</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Vai funcionar?"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Output no console:</em></p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token known-class-name class-name">TypeError</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> expression is not a fuction</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusão">Conclusão<a href="https://lucas-picinini.netlify.app/blog/hoisting-javascript#conclus%C3%A3o" class="hash-link" aria-label="Link direto para Conclusão" title="Link direto para Conclusão">​</a></h2>
<p>Hoje vamos ficar por aqui, mas eu espero que esse pequeno artigo tenha sido uma boa introdução ao Hoisting para você. Com o tempo você vai se aprofundar nesses conceitos e entender quando usar cada tipo de declaração ao seu favor, mas principalmente, entendenter possíveis erros emitidos pelo console, facilitando a correção dos bugs. Isso pode ajudar ainda mais naqueles casos onde a manutenção está sendo feita em um código que não foi escrito por você.</p>
<p>Aprender de maneira informal é bom para limpar a mente e relembrar como gostamos de um assunto. Não precisamos complicar ainda mais o que já é complexo.</p>
<p>E por último mas não menos importante: <strong>qualquer colaboração é bem-vinda!</strong> Esse artigo foi apenas uma tradução livre das fontes citadas lá no início e não significa que sei tudo sobre o assunto, ou seja, caso alguém tenha alguma coisa para acrescentar aqui, será muito bem vindo. Minha intenção é apenas viabilizar mais e mais conteúdo em nossa língua nativa, sobrecarregando menos nossa cabeça e deixando o material bruto pra quando não tiver jeito rs. Bons estudos!</p>]]></content:encoded>
            <category>javascript</category>
            <category>hoisting</category>
        </item>
        <item>
            <title><![CDATA[Phishing com Kali Linux/setoolkit e apache2 HTTP server]]></title>
            <link>https://lucas-picinini.netlify.app/blog/phishing-kali-linux</link>
            <guid>https://lucas-picinini.netlify.app/blog/phishing-kali-linux</guid>
            <pubDate>Wed, 22 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Configurações:]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configurações">Configurações:<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#configura%C3%A7%C3%B5es" class="hash-link" aria-label="Link direto para Configurações:" title="Link direto para Configurações:">​</a></h2>
<p>Antes de iniciar o setoolkit, precisamos realizar algumas configurações para utilizá-lo com o apache2. Por default, as configurações do setoolkit ficam no arquivo set.config no path -&gt; /etc/setoolkit/set.config/ .</p>
<p><img loading="lazy" alt="imagem 8" src="https://lucas-picinini.netlify.app/assets/images/8-b4c82d7d993148cd65d781a1f8925e46.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="vamos-abrir-o-arquivo-com-um-editor-de-texto-e-editar-as-linhas-sublinhadas-nas-imagens-a-seguir-deixando-da-forma-como-estão-exibidas-neste-exemplo">Vamos abrir o arquivo com um editor de texto e editar as linhas sublinhadas nas imagens a seguir, deixando da forma como estão exibidas neste exemplo:<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#vamos-abrir-o-arquivo-com-um-editor-de-texto-e-editar-as-linhas-sublinhadas-nas-imagens-a-seguir-deixando-da-forma-como-est%C3%A3o-exibidas-neste-exemplo" class="hash-link" aria-label="Link direto para Vamos abrir o arquivo com um editor de texto e editar as linhas sublinhadas nas imagens a seguir, deixando da forma como estão exibidas neste exemplo:" title="Link direto para Vamos abrir o arquivo com um editor de texto e editar as linhas sublinhadas nas imagens a seguir, deixando da forma como estão exibidas neste exemplo:">​</a></h3>
<p><img loading="lazy" alt="imagem 9" src="https://lucas-picinini.netlify.app/assets/images/9-4d0fd7eadf578c5f6c7c10305fefec02.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<p><img loading="lazy" alt="imagem 10" src="https://lucas-picinini.netlify.app/assets/images/10-ef17f81091daf9a7999a7f57e8ccdadc.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<p><img loading="lazy" alt="imagem 11" src="https://lucas-picinini.netlify.app/assets/images/11-9c3bca105a81f1c035ce6af5d5bbf4b4.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<p><strong>OBS:</strong> <em>Caso você tenha definido outro diretório raiz para o Apache que não seja o padrão, acrescente esse path no lugar do caminho /var/www/html/ .</em></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="porque-utilizar-o-apache2-">Porque utilizar o apache2 ?<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#porque-utilizar-o-apache2-" class="hash-link" aria-label="Link direto para Porque utilizar o apache2 ?" title="Link direto para Porque utilizar o apache2 ?">​</a></h3>
<p>Como informado no arquivo de configuração do próprio setoolkit, a utilização do apache2 aumenta a performance do vetor de ataque quando utilizado no lugar do web server default, que é o Python Web Server.</p>
<p><img loading="lazy" alt="imagem 12" src="https://lucas-picinini.netlify.app/assets/images/12-9627132f535ff1893630c8d544ce4e92.png" title="imagem" width="715" height="75" class="img_ev3q"></p>
<h1>Vamos começar!</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="passo-1">Passo 1:<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#passo-1" class="hash-link" aria-label="Link direto para Passo 1:" title="Link direto para Passo 1:">​</a></h2>
<p>Com as configurações previamente realizadas, abra seu terminal como root e execute o seguinte comando:</p>
<div class="language-zsh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-zsh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ setoolkit</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Selecione a primeira opção na tela que será exibida, "Social-Engineering Attacks".</p>
<p><img loading="lazy" alt="imagem 1" src="https://lucas-picinini.netlify.app/assets/images/1-036f77dcf92f311063837972ffdef602.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="passo-2">Passo 2:<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#passo-2" class="hash-link" aria-label="Link direto para Passo 2:" title="Link direto para Passo 2:">​</a></h2>
<p>Selecione a segunda opção, "Website Attack Vectors".</p>
<p><img loading="lazy" alt="imagem 2" src="https://lucas-picinini.netlify.app/assets/images/2-abfb77ee1d340b9c3cc9c1ef6ae2afd6.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="passo-3">Passo 3:<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#passo-3" class="hash-link" aria-label="Link direto para Passo 3:" title="Link direto para Passo 3:">​</a></h2>
<p>Selecione a terceira opção, "Credential Harvester Attack Method".</p>
<p><img loading="lazy" alt="imagem 3" src="https://lucas-picinini.netlify.app/assets/images/3-c04b2b17dd897c5f3801a40eb065fb9b.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="passo-4">Passo 4:<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#passo-4" class="hash-link" aria-label="Link direto para Passo 4:" title="Link direto para Passo 4:">​</a></h2>
<p>Selecione a segunda opção, "Site Cloner".</p>
<p><img loading="lazy" alt="imagem 4" src="https://lucas-picinini.netlify.app/assets/images/4-1b9599b3c5c2d305aaed38465b5cf3a0.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<p>Essa opção nos permite criar uma fakepage estática, clonando uma página de formulário POST qualquer e rodando em um servidor particular. Caso a pessoa preencha os dados do formulário falso, vamos receber os valores e redirecionar a pessoa para a página original na qual ela estava tentando acessar (página clonada).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="passo-5">Passo 5:<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#passo-5" class="hash-link" aria-label="Link direto para Passo 5:" title="Link direto para Passo 5:">​</a></h2>
<p>Nesta etapa, é preciso informar o IP hospedeiro da página fake e o site a ser clonado via protocolo HTTP. O setoolkit já sugere o ip do host no momento da seleção da ferramenta Site Cloner. Basta pressionar Enter caso queira utilizar o IP sugerido ou adicionar outro de sua preferência <em>(Atenção para manter as mesmas configurações no apache2. As portas também precisam ser as mesmas no apache2 e no setoolkit, que escutam na porta 80 por default)</em>. Em seguida, é preciso inserir a URL do site que será clonado via HTTP. O processo pode demorar alguns minutos.</p>
<p><img loading="lazy" alt="imagem 5" src="https://lucas-picinini.netlify.app/assets/images/5-65ed28d102dfc37c61d08981182528f2.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="passo-6">Passo 6:<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#passo-6" class="hash-link" aria-label="Link direto para Passo 6:" title="Link direto para Passo 6:">​</a></h2>
<p>Após o fim do processo, é possível que o terminal nos informe que o service do apache2 pode não estar rodando e se queremos que o setoolkit o inicie para nós. Vamos confirmar com a letra y.</p>
<p><img loading="lazy" alt="imagem 14" src="https://lucas-picinini.netlify.app/assets/images/14-83221a9dfa4349cef4b316187fb29fd2.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="onde-os-logs-serão-salvos">Onde os logs serão salvos?<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#onde-os-logs-ser%C3%A3o-salvos" class="hash-link" aria-label="Link direto para Onde os logs serão salvos?" title="Link direto para Onde os logs serão salvos?">​</a></h2>
<p>Logo após a cópia do site ter sido concluída, somos informados que o serviço já está no ar e que os logs serão salvos no diretório raiz do apache, sob o nome de harvester seguido das informações da data e no formato .txt.</p>
<p><img loading="lazy" alt="imagem 15" src="https://lucas-picinini.netlify.app/assets/images/15-d42e73c116551dcc40cc45a41a4a949c.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="acessando-a-página-clonada">Acessando a página clonada:<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#acessando-a-p%C3%A1gina-clonada" class="hash-link" aria-label="Link direto para Acessando a página clonada:" title="Link direto para Acessando a página clonada:">​</a></h2>
<p>Agora, ao inserirmos o IP na barra de endereços do navegador, será exibida uma versão falsa da página clonada. Depois de preecher o formulário e submeter, a pessoa será redirecionada ao site original e poderemos ter acesso aos dados inseridos no formulário.</p>
<p><img loading="lazy" alt="imagem 6" src="https://lucas-picinini.netlify.app/assets/images/6-63fcdfab4c4801d6afa4949d554fec57.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<p><img loading="lazy" alt="imagem 6-1" src="https://lucas-picinini.netlify.app/assets/images/6-1-dd4a1b961f96d74983b8208ba6047458.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="resultado">Resultado:<a href="https://lucas-picinini.netlify.app/blog/phishing-kali-linux#resultado" class="hash-link" aria-label="Link direto para Resultado:" title="Link direto para Resultado:">​</a></h2>
<p>Pronto! Se tudo deu certo, os valores inseridos no formulário estarão contidos no local informado pelo setoolkit, que é o diretório raiz do apache2, no caso deste exemplo, /var/www/html .</p>
<p>Abrindo o terminal e nos movendo para o diretório, podemos ver o arquivo harvester_DATADEUSO.txt</p>
<p><img loading="lazy" alt="imagem 16" src="https://lucas-picinini.netlify.app/assets/images/16-24e5b31fd2334011f6ff62b7598caed5.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<hr>
<p>Utilizando o comando <code>cat</code> para exibir o conteúdo do arquivo ou simplesmente abrindo com um editor de texto, podemos ver o registro dos valores inseridos pela pessoa no formulário.</p>
<p><img loading="lazy" alt="imagem 17" src="https://lucas-picinini.netlify.app/assets/images/17-169a5625da7d3c0e46540db5e85be0ac.png" title="imagem" width="1366" height="768" class="img_ev3q"></p>
<hr>
<h1><em>Utilize os aprendizados com sabedoria!</em></h1>]]></content:encoded>
            <category>linux</category>
            <category>hacker</category>
        </item>
    </channel>
</rss>