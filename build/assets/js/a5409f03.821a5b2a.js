"use strict";(self.webpackChunkmy_portfolio=self.webpackChunkmy_portfolio||[]).push([[118],{4568:(e,o,a)=>{a.r(o),a.d(o,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var s=a(5893),n=a(1151);const i={slug:"hoisting-javascript",title:"Entendo o Hoisting no JavaScript",authors:"lucas",tags:["javascript","hoisting"]},r="Entendo o Hoisting no JavaScript",c={permalink:"/blog/hoisting-javascript",source:"@site/blog/2024-01-22-hoisting-javascript/2024-01-22-hoisting-javascript.md",title:"Entendo o Hoisting no JavaScript",description:"hoist \xe9 literalmente guindaste em ingl\xeas",date:"2024-01-22T00:00:00.000Z",formattedDate:"22 de janeiro de 2024",tags:[{label:"javascript",permalink:"/blog/tags/javascript"},{label:"hoisting",permalink:"/blog/tags/hoisting"}],readingTime:8.835,hasTruncateMarker:!1,authors:[{name:"Lucas Picinini",title:"Desenvolvedor e Graduando em Ci\xeancia da Computa\xe7\xe3o",url:"https://github.com/lucaspicinini",imageURL:"https://github.com/lucaspicinini.png",key:"lucas"}],frontMatter:{slug:"hoisting-javascript",title:"Entendo o Hoisting no JavaScript",authors:"lucas",tags:["javascript","hoisting"]},unlisted:!1,nextItem:{title:"Phishing com Kali Linux/setoolkit e apache2 HTTP server",permalink:"/blog/phishing-kali-linux"}},d={authorsImageUrls:[void 0]},l=[{value:"<em>hoist \xe9 literalmente guindaste em ingl\xeas</em>",id:"hoist-\xe9-literalmente-guindaste-em-ingl\xeas",level:2},{value:"Introdu\xe7\xe3o",id:"introdu\xe7\xe3o",level:2},{value:"Apresenta\xe7\xe3o",id:"apresenta\xe7\xe3o",level:2},{value:"Entendendo escopo Global e Local",id:"entendendo-escopo-global-e-local",level:2},{value:"Declara\xe7\xf5es, atribui\xe7\xe3o/inicializa\xe7\xe3o e uso/chamadas",id:"declara\xe7\xf5es-atribui\xe7\xe3oinicializa\xe7\xe3o-e-usochamadas",level:3},{value:"Escopos",id:"escopos",level:3},{value:"undefined vs ReferenceError",id:"undefined-vs-referenceerror",level:2},{value:"O tal do Hoisting",id:"o-tal-do-hoisting",level:2},{value:"Hoisting com declara\xe7\xf5es var",id:"hoisting-com-declara\xe7\xf5es-var",level:3},{value:"Hoisting com declara\xe7\xf5es let/const(ES6)",id:"hoisting-com-declara\xe7\xf5es-letconstes6",level:3},{value:"Hoisting em Fun\xe7\xf5es",id:"hoisting-em-fun\xe7\xf5es",level:2},{value:"Declara\xe7\xf5es de Fun\xe7\xf5es",id:"declara\xe7\xf5es-de-fun\xe7\xf5es",level:3},{value:"Express\xf5es de Fun\xe7\xf5es",id:"express\xf5es-de-fun\xe7\xf5es",level:3},{value:"Conclus\xe3o",id:"conclus\xe3o",level:2}];function t(e){const o={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.h2,{id:"hoist-\xe9-literalmente-guindaste-em-ingl\xeas",children:(0,s.jsx)(o.em,{children:"hoist \xe9 literalmente guindaste em ingl\xeas"})}),"\n",(0,s.jsxs)(o.blockquote,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Considera\xe7\xf5es Breves:"}),' Essa \xe9 uma mistura bem maneira de dois artigos realizada atrav\xe9s de uma tradu\xe7\xe3o livre, com o objetivo de tornar conceitos de programa\xe7\xe3o mais acess\xedveis \xe0 nossa maneira nativa de falar as coisas, buscando assuntos que carecem de fontes em portugu\xeas e fugindo um pouco dos termos "quadrados" que os tradutores nos oferecem. Todos sabemos que essas ferramentas evolu\xedram demais nos \xfaltimos anos e d\xe3o conta do servi\xe7o, mas tamb\xe9m \xe9 bem legal aprender algo com uma linguagem nativa mais pr\xf3xima do que a gente usa no dia a dia n\xe3o \xe9 mesmo?! Ent\xe3o sem mais delongas ou formalidades, aqui est\xe3o as fontes de pesquisa - ',(0,s.jsx)(o.a,{href:"https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript#introduction",children:"DigitalOcean"})," - ",(0,s.jsx)(o.a,{href:"https://www.geeksforgeeks.org/javascript-hoisting/",children:"GeeksforGeeks"})," ; e vamos para o assunto. Assunto();"]}),"\n"]}),"\n",(0,s.jsx)(o.h2,{id:"introdu\xe7\xe3o",children:"Introdu\xe7\xe3o"}),"\n",(0,s.jsx)(o.p,{children:"Neste artigo vamos investigar o famoso mecanismo de hoisting do JavaScript. Como mencionado l\xe1 no in\xedcio, hoist \xe9 literalmente guindaste em ingl\xeas e hoisting pode ser traduzido como eleva\xe7\xe3o ou suspens\xe3o. Tenham isso em mente porque o cara que inventou o nome pra isso fez uma boa analogia e ajuda a entender melhor o conceito. Check it out."}),"\n",(0,s.jsx)(o.h2,{id:"apresenta\xe7\xe3o",children:"Apresenta\xe7\xe3o"}),"\n",(0,s.jsx)(o.p,{children:"O Hoisting \xe9 o comportamento padr\xe3o do JavaScript de mover as declara\xe7\xf5es para o topo do seu escopo antes da execu\xe7\xe3o do c\xf3digo, n\xe3o importa se o escopo seja global ou local. Se voc\xea j\xe1 se perguntou o porque \xe9 capaz de chamar fun\xe7\xf5es antes mesmo das linhas em que elas est\xe3o escritas, aqui est\xe1 o motivo."}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.em,{children:"Nota\xb9 -> o JavaScript faz apenas o hoisting de declara\xe7\xf5es, N\xc3O de inicializa\xe7\xf5es."})}),"\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.em,{children:"Nota\xb2 -> o JavaScript aloca mem\xf3ria para todas as vari\xe1veis e fun\xe7\xf5es definidas no programa antes da execu\xe7\xe3o."})}),"\n"]}),"\n",(0,s.jsx)(o.h2,{id:"entendendo-escopo-global-e-local",children:"Entendendo escopo Global e Local"}),"\n",(0,s.jsx)(o.h3,{id:"declara\xe7\xf5es-atribui\xe7\xe3oinicializa\xe7\xe3o-e-usochamadas",children:"Declara\xe7\xf5es, atribui\xe7\xe3o/inicializa\xe7\xe3o e uso/chamadas"}),"\n",(0,s.jsx)(o.p,{children:"Antes de partirmos para os escopos, precisamos deixar claro para todos o que \xe9 cada tipo de linha no c\xf3digo e lembre-se, o hoisting acontece apenas para declara\xe7\xf5es e n\xe3o para inicializa\xe7\xf5es ou atribui\xe7\xf5es."}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Declara\xe7\xf5es"})," -> Ocorrem quando declaramos uma vari\xe1vel ou constante. \xc9 quando estamos criando ela no c\xf3digo."]}),"\n"]}),"\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Atribui\xe7\xf5es/inicializa\xe7\xe3o"})," -> Pode ser entendido como o momento que jogamos um valor pra dentro de uma vari\xe1vel, justamente atribuindo algo a ela ou iniciando a parada que foi declarada, mesmo que depois ela assuma outro valor."]}),"\n"]}),"\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Uso/chamada"})," -> \xc9 quando usamos essa vari\xe1vel e seu valor para algum output ou qualquer outra coisa durante o programa."]}),"\n"]}),"\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.strong,{children:"Exemplo:"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"let a;          // Declara\xe7\xe3o\na = 100;        // Atribui\xe7\xe3o\nconsole.log(a); // Uso\n"})}),"\n",(0,s.jsx)(o.h3,{id:"escopos",children:"Escopos"}),"\n",(0,s.jsx)(o.p,{children:"Conceito que circunda toda linguagem de programa\xe7\xe3o e \xe9 extremamente importante, diz respeito ao local onde uma vari\xe1vel \xe9 acess\xedvel dentro do c\xf3digo. Antes do ECMAScript6, o JavaScript s\xf3 possu\xeda escopo global e local. Com a introdu\xe7\xe3o do ES6, o JavaScript passou a ter escopo Global, Local e de Bloco. No JavaScript, quando declaramos uma vari\xe1vel dentro de uma fun\xe7\xe3o ou bloco, ela s\xf3 \xe9 acess\xedvel l\xe1 dentro, n\xe3o podendo ser acessada pelo lado de fora, mas podemos utilizar um return ou outras t\xe9cnicas para fazer a fun\xe7\xe3o cuspir o valor pra fora. Exemplos:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Escopo de Bloco"})," -> vari\xe1veis declaradas dentro de um "," bloco n\xe3o podem ser acessadas por fora."]}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"{\n  let x = 2;\n}\n// n\xe3o podemos acessar x aqui\n"})}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsxs)(o.strong,{children:["Vari\xe1veis declaradas com var N\xc3O podem ter escopo de bloco ","."]})}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"{\n  var x = 2;\n}\n// x PODE ser acessado aqui\n"})}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Escopo local"})," -> Vari\xe1veis declaradas dentro de ",(0,s.jsx)(o.strong,{children:"fun\xe7\xf5es"})," possuem escopo local. Neste caso, n\xe3o importa se utilizarmos var, let ou const na declara\xe7\xe3o, as 3 formas criam escopo local."]}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:'function myFunction() {\n  var carName = "Tesla";   \n} // carName n\xe3o pode ser acessado aqui\n'})}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Escopo global"})," -> Vari\xe1veis com escopo global podem ser acessadas em qualquer local do programa."]}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:'let carName = "Tesla";\n// podemos acessar aqui\n\nfunction myFunction() {\n// e usar a vari\xe1vel aqui tamb\xe9m\n}\n'})}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Vari\xe1veis n\xe3o declaradas"})," -> sem o uso das palavras var, let ou const."]}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"    function codeHoist(){\n        a = 10;\n        let b = 50;\n    }\n    codeHoist();\n \n    console.log(a); // 10\n    console.log(b); // ReferenceError : b is not defined\n"})}),"\n",(0,s.jsxs)(o.p,{children:["O c\xf3digo deu erro com o ",(0,s.jsx)(o.em,{children:"b"})," porque essa vari\xe1vel possui escopo local, ao mesmo tempo, conseguimos acessar o ",(0,s.jsx)(o.em,{children:"a"})," fora da fun\xe7\xe3o porque todas as vari\xe1veis declaradas sem as palavras reservadas var, let ou const, passam a ter ",(0,s.jsx)(o.strong,{children:"escopo global automaticamente"}),". Tenha aten\xe7\xe3o com isso. Vamos entender melhor os erros que envolvem o hoisting a seguir."]}),"\n",(0,s.jsx)(o.h2,{id:"undefined-vs-referenceerror",children:"undefined vs ReferenceError"}),"\n",(0,s.jsx)(o.p,{children:"\xc9 importante entender os tipos de erro que o console apresenta, isso permite debugar o c\xf3digo de maneira consistente e encontrar os bugs mais rapidamente. H\xe1 uma pequena diferen\xe7a entre undefined e ReferenceError. O undefined ocorre quando temos uma vari\xe1vel que n\xe3o est\xe1 definida ou que est\xe1 explicitamente definida como undefined (existem algumas aplica\xe7\xf5es para isso). O ReferenceError acontece quando tentamos acessar uma vari\xe1vel que nem foi declarada. Entender isso ser\xe1 importante para compreender os conceitos a seguir."}),"\n",(0,s.jsx)(o.h2,{id:"o-tal-do-hoisting",children:"O tal do Hoisting"}),"\n",(0,s.jsx)(o.p,{children:"Quando pensamos nas especifica\xe7\xf5es ECMAScript5, o tipo de vari\xe1vel que vem a mente \xe9 o var. O Hoisting acontece de maneira um pouco diferente com esse tipo de declara\xe7\xe3o quando comparamos com let ou const, isso ocorre por causa de algumas mudan\xe7as que ocorreram com a inser\xe7\xe3o do let/const na linguagem com o lan\xe7amento do ECMAScript6. Primeiramente vamos utilizar o var como exemplo e finalmente enteder como esse impotante conceito, o Hoisting (ou eleva\xe7\xe3o), se comporta."}),"\n",(0,s.jsx)(o.h3,{id:"hoisting-com-declara\xe7\xf5es-var",children:"Hoisting com declara\xe7\xf5es var"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.strong,{children:"Como escrevemos o c\xf3digo:"})}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"    console.log(name);\n    var name = 'Fulaninho da Massa';\n"})}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.em,{children:"Output no console:"})}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"undefined\n"})}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.strong,{children:"Como o interpretador v\xea o c\xf3digo:"})}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"    var name;\n    console.log(name); // undefined\n    name = 'Fulaninho da Massa';\n"})}),"\n",(0,s.jsxs)(o.p,{children:["Aqui podemos ver ",(0,s.jsx)(o.strong,{children:"o Hoisting em a\xe7\xe3o pela primeira vez"}),", pois como explicado l\xe1 no in\xedcio do artigo, o Hoisting \xe9 o comportamento padr\xe3o do JavaScript de mover as ",(0,s.jsx)(o.strong,{children:"declara\xe7\xf5es"})," para o topo do seu escopo antes da execu\xe7\xe3o do c\xf3digo. Como o Hoisting suspende/eleva apenas as declara\xe7\xf5es, mas n\xe3o as inicializa\xe7\xf5es do c\xf3digo, o console cospe undefined, porque entende que \xe9 uma vari\xe1vel apenas declarada, que ainda n\xe3o foi definida (como vimos na se\xe7\xe3o de erros)."]}),"\n",(0,s.jsx)(o.h3,{id:"hoisting-com-declara\xe7\xf5es-letconstes6",children:"Hoisting com declara\xe7\xf5es let/const(ES6)"}),"\n",(0,s.jsx)(o.p,{children:"Se utilizarmos o exemplo anterior, mas declarando nossa vari\xe1vel com a palavra let, vamos notar um comportamento diferente, isso \xe9 explicado por conta de algumas mudan\xe7as com a ado\xe7\xe3o do padr\xe3o ES6."}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.strong,{children:"Como escrevemos o c\xf3digo:"})}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"    console.log(name);\n    let name = 'Fulaninho da Massa';\n"})}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.em,{children:"Output no console:"})}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"ReferenceError: name is not defined\n"})}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.strong,{children:"Como o interpretador v\xea o c\xf3digo:"})}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"    console.log(name); // ReferenceError: name is not defined\n    let name = 'Fulaninho da Massa';\n"})}),"\n",(0,s.jsx)(o.p,{children:"Neste caso, por conta da introdu\xe7\xe3o do ES6 e suas mudan\xe7as t\xe9cnicas que n\xe3o aceitam bem o uso de vari\xe1veis n\xe3o declaradas, o Hoisting se comporta de forma diferente. \xc9 como se ele n\xe3o conseguisse desgrudar a declara\xe7\xe3o da atribui\xe7\xe3o para elev\xe1-la ao topo do escopo em seguida, como aconteceu no exemplo com o var. Sendo assim, como o Hoisting s\xf3 funciona para declara\xe7\xf5es e n\xe3o para atribui\xe7\xf5es, ele n\xe3o acontece neste caso, j\xe1 que n\xe3o consegue descolar a declara\xe7\xe3o da atribui\xe7\xe3o com as palavras let ou const. \xc9 simplesmente uma defini\xe7\xe3o do ES6."}),"\n",(0,s.jsx)(o.p,{children:"Por esse motivo o console cospe o erro ReferenceError, pois para a m\xe1quina essa vari\xe1vel ainda nem foi declarada, j\xe1 que a execu\xe7\xe3o do c\xf3digo acontece linha por linha e neste caso o Hoisting n\xe3o aconteceu. Doidera n\xe9 n\xe3o?! Mas como achamos isso legal, vamos entender o Hoisting em fun\xe7\xf5es e porque n\xe3o conseguimos chamar alguns tipos de fun\xe7\xe3o antes de declar\xe1-las."}),"\n",(0,s.jsxs)(o.blockquote,{children:["\n",(0,s.jsx)(o.p,{children:"\xc9 importante lembrar que o Hoisting ocorre para as declara\xe7\xf5es de var, let e const no JavaScript. Apenas nos casos que envolvem inicializa\xe7\xe3o/atribui\xe7\xe3o que o comportamento se difere."}),"\n"]}),"\n",(0,s.jsx)(o.h2,{id:"hoisting-em-fun\xe7\xf5es",children:"Hoisting em Fun\xe7\xf5es"}),"\n",(0,s.jsx)(o.p,{children:"A grosso modo, as fun\xe7\xf5es no JavaScript podem ser dividas em: Declara\xe7\xf5es de Fun\xe7\xf5es e Express\xf5es de Fun\xe7\xf5es. Agora n\xf3s vamos investigar como o Hoisting afeta esses tipos de fun\xe7\xf5es."}),"\n",(0,s.jsx)(o.h3,{id:"declara\xe7\xf5es-de-fun\xe7\xf5es",children:"Declara\xe7\xf5es de Fun\xe7\xf5es"}),"\n",(0,s.jsxs)(o.p,{children:["Maneira mais conhecida e tradicional de declarar fun\xe7\xf5es. \xc9 declarada atrav\xe9s da palavra ",(0,s.jsx)(o.em,{children:"function"}),", seguida do nome da fun\xe7\xe3o e dos par\xeanteses, que podem conter par\xe2metros ou n\xe3o, finalizando com as chaves de abertura e fechamento do bloco de execu\xe7\xe3o."]}),"\n",(0,s.jsxs)(o.p,{children:["Esse tipo de fun\xe7\xe3o ",(0,s.jsx)(o.strong,{children:"\xe9 completamente afetada pelo Hoisting"})," e imediatamente elevada para o topo do seu escopo pelo interpretador antes da execu\xe7\xe3o do c\xf3digo. Isso \xe9 o que permite a chamada de fun\xe7\xf5es antes de sua apari\xe7\xe3o na escrita do c\xf3digo. Veja como funciona no exemplo a seguir:"]}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.strong,{children:"Como escrevemos o c\xf3digo:"})}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:'    meEleve(); // Output: Essa fun\xe7\xe3o foi elevada.\n    function meEleve() {\n      console.log("Essa fun\xe7\xe3o foi elevada.")\n    };\n'})}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.em,{children:"Output no console:"})}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"Essa fun\xe7\xe3o foi elevada.\n"})}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.strong,{children:"Como o interpretador v\xea o c\xf3digo:"})}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:'    function meEleve() {\n      console.log("Essa fun\xe7\xe3o foi elevada.")\n    };\n    meEleve();\n'})}),"\n",(0,s.jsx)(o.h3,{id:"express\xf5es-de-fun\xe7\xf5es",children:"Express\xf5es de Fun\xe7\xf5es"}),"\n",(0,s.jsxs)(o.p,{children:["Express\xf5es de fun\xe7\xf5es ",(0,s.jsx)(o.strong,{children:"N\xc3O"})," sofrem o efeito do Hoisting. Podemos usar a mesma abstra\xe7\xe3o utilizada no exemplo onde let/const s\xe3o declaradas j\xe1 sendo inicializadas para entender o que ocorre aqui, pois \xe9 basicamente o mesmo efeito."]}),"\n",(0,s.jsx)(o.p,{children:"\xc9 como se o Hoisting n\xe3o conseguisse descolar a decla\xe7\xe3o da fun\xe7\xe3o que est\xe1 sendo inicializada na vari\xe1vel, dessa forma, como o Hoisting n\xe3o funciona para atribui\xe7\xf5es, ele tamb\xe9m n\xe3o acontece neste caso. Exemplo:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.strong,{children:"Como escrevemos o c\xf3digo:"})}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:'    vaiDaErrado(); // Output: TypeError: expression is not a fuction\n    var vaiDaErrado = function () {\n      console.log("Vai funcionar?")\n    }\n'})}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.em,{children:"Output no console:"})}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-javascript",children:"TypeError: expression is not a fuction\n"})}),"\n",(0,s.jsx)(o.h2,{id:"conclus\xe3o",children:"Conclus\xe3o"}),"\n",(0,s.jsx)(o.p,{children:"Hoje vamos ficar por aqui, mas eu espero que esse pequeno artigo tenha sido uma boa introdu\xe7\xe3o ao Hoisting para voc\xea. Com o tempo voc\xea vai se aprofundar nesses conceitos e entender quando usar cada tipo de declara\xe7\xe3o ao seu favor, mas principalmente, entendenter poss\xedveis erros emitidos pelo console, facilitando a corre\xe7\xe3o dos bugs. Isso pode ajudar ainda mais naqueles casos onde a manuten\xe7\xe3o est\xe1 sendo feita em um c\xf3digo que n\xe3o foi escrito por voc\xea."}),"\n",(0,s.jsx)(o.p,{children:"Aprender de maneira informal \xe9 bom para limpar a mente e relembrar como gostamos de um assunto. N\xe3o precisamos complicar ainda mais o que j\xe1 \xe9 complexo."}),"\n",(0,s.jsxs)(o.p,{children:["E por \xfaltimo mas n\xe3o menos importante: ",(0,s.jsx)(o.strong,{children:"qualquer colabora\xe7\xe3o \xe9 bem-vinda!"})," Esse artigo foi apenas uma tradu\xe7\xe3o livre das fontes citadas l\xe1 no in\xedcio e n\xe3o significa que sei tudo sobre o assunto, ou seja, caso algu\xe9m tenha alguma coisa para acrescentar aqui, ser\xe1 muito bem vindo. Minha inten\xe7\xe3o \xe9 apenas viabilizar mais e mais conte\xfado em nossa l\xedngua nativa, sobrecarregando menos nossa cabe\xe7a e deixando o material bruto pra quando n\xe3o tiver jeito rs. Bons estudos!"]})]})}function u(e={}){const{wrapper:o}={...(0,n.a)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}},1151:(e,o,a)=>{a.d(o,{Z:()=>c,a:()=>r});var s=a(7294);const n={},i=s.createContext(n);function r(e){const o=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(i.Provider,{value:o},e.children)}}}]);